// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dm "github.com/hellodoge/delivery-manager/dm"
)

// MockAuthorization is a mock of Authorization interface.
type MockAuthorization struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationMockRecorder
}

// MockAuthorizationMockRecorder is the mock recorder for MockAuthorization.
type MockAuthorizationMockRecorder struct {
	mock *MockAuthorization
}

// NewMockAuthorization creates a new mock instance.
func NewMockAuthorization(ctrl *gomock.Controller) *MockAuthorization {
	mock := &MockAuthorization{ctrl: ctrl}
	mock.recorder = &MockAuthorizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorization) EXPECT() *MockAuthorizationMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockAuthorization) CreateUser(user dm.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthorizationMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthorization)(nil).CreateUser), user)
}

// GenerateRefreshToken mocks base method.
func (m *MockAuthorization) GenerateRefreshToken(username, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateRefreshToken", username, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateRefreshToken indicates an expected call of GenerateRefreshToken.
func (mr *MockAuthorizationMockRecorder) GenerateRefreshToken(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateRefreshToken", reflect.TypeOf((*MockAuthorization)(nil).GenerateRefreshToken), username, password)
}

// GenerateToken mocks base method.
func (m *MockAuthorization) GenerateToken(refreshToken string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", refreshToken)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockAuthorizationMockRecorder) GenerateToken(refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockAuthorization)(nil).GenerateToken), refreshToken)
}

// ParseToken mocks base method.
func (m *MockAuthorization) ParseToken(token string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", token)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockAuthorizationMockRecorder) ParseToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockAuthorization)(nil).ParseToken), token)
}

// MockDMProduct is a mock of DMProduct interface.
type MockDMProduct struct {
	ctrl     *gomock.Controller
	recorder *MockDMProductMockRecorder
}

// MockDMProductMockRecorder is the mock recorder for MockDMProduct.
type MockDMProductMockRecorder struct {
	mock *MockDMProduct
}

// NewMockDMProduct creates a new mock instance.
func NewMockDMProduct(ctrl *gomock.Controller) *MockDMProduct {
	mock := &MockDMProduct{ctrl: ctrl}
	mock.recorder = &MockDMProductMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDMProduct) EXPECT() *MockDMProductMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDMProduct) Create(products []dm.Product) ([]dm.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", products)
	ret0, _ := ret[0].([]dm.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockDMProductMockRecorder) Create(products interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDMProduct)(nil).Create), products)
}

// Exists mocks base method.
func (m *MockDMProduct) Exists(productID int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", productID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockDMProductMockRecorder) Exists(productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockDMProduct)(nil).Exists), productID)
}

// Search mocks base method.
func (m *MockDMProduct) Search(query dm.ProductSearchQuery) ([]dm.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", query)
	ret0, _ := ret[0].([]dm.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockDMProductMockRecorder) Search(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockDMProduct)(nil).Search), query)
}

// MockDMList is a mock of DMList interface.
type MockDMList struct {
	ctrl     *gomock.Controller
	recorder *MockDMListMockRecorder
}

// MockDMListMockRecorder is the mock recorder for MockDMList.
type MockDMListMockRecorder struct {
	mock *MockDMList
}

// NewMockDMList creates a new mock instance.
func NewMockDMList(ctrl *gomock.Controller) *MockDMList {
	mock := &MockDMList{ctrl: ctrl}
	mock.recorder = &MockDMListMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDMList) EXPECT() *MockDMListMockRecorder {
	return m.recorder
}

// AddProduct mocks base method.
func (m *MockDMList) AddProduct(userID, listID int, index []dm.ProductIndex) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProduct", userID, listID, index)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddProduct indicates an expected call of AddProduct.
func (mr *MockDMListMockRecorder) AddProduct(userID, listID, index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProduct", reflect.TypeOf((*MockDMList)(nil).AddProduct), userID, listID, index)
}

// Create mocks base method.
func (m *MockDMList) Create(userID int, list dm.List) (dm.List, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", userID, list)
	ret0, _ := ret[0].(dm.List)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockDMListMockRecorder) Create(userID, list interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDMList)(nil).Create), userID, list)
}

// Delete mocks base method.
func (m *MockDMList) Delete(userID, listID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", userID, listID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDMListMockRecorder) Delete(userID, listID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDMList)(nil).Delete), userID, listID)
}

// GetUserLists mocks base method.
func (m *MockDMList) GetUserLists(userID int) ([]dm.List, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserLists", userID)
	ret0, _ := ret[0].([]dm.List)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserLists indicates an expected call of GetUserLists.
func (mr *MockDMListMockRecorder) GetUserLists(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserLists", reflect.TypeOf((*MockDMList)(nil).GetUserLists), userID)
}

// MockDMDelivery is a mock of DMDelivery interface.
type MockDMDelivery struct {
	ctrl     *gomock.Controller
	recorder *MockDMDeliveryMockRecorder
}

// MockDMDeliveryMockRecorder is the mock recorder for MockDMDelivery.
type MockDMDeliveryMockRecorder struct {
	mock *MockDMDelivery
}

// NewMockDMDelivery creates a new mock instance.
func NewMockDMDelivery(ctrl *gomock.Controller) *MockDMDelivery {
	mock := &MockDMDelivery{ctrl: ctrl}
	mock.recorder = &MockDMDeliveryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDMDelivery) EXPECT() *MockDMDeliveryMockRecorder {
	return m.recorder
}
